// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_ERROR.String() && e.Code == 500
}

func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsValidationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VALIDATION_FAILED.String() && e.Code == 400
}

func ErrorValidationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_VALIDATION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsAccessDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCESS_DENIED.String() && e.Code == 403
}

func ErrorAccessDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ACCESS_DENIED.String(), fmt.Sprintf(format, args...))
}
