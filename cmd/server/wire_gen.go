// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/phlx-ru/hatchet/metrics"
	"storage/internal/biz"
	"storage/internal/clients/auth"
	"storage/internal/clients/minio"
	"storage/internal/conf"
	"storage/internal/data"
	"storage/internal/server"
	"storage/internal/service"
)

// Injectors from wire.go:

// wireData init database
func wireData(confData *conf.Data, logger log.Logger) (data.Database, func(), error) {
	database, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	return database, func() {
		cleanup()
	}, nil
}

// wireApp init kratos application.
func wireApp(contextContext context.Context, database data.Database, confServer *conf.Server, confAuth *conf.Auth, client auth.Client, minioClient minio.Client, metricsMetrics metrics.Metrics, logger log.Logger) (*kratos.App, error) {
	fileRepo := data.NewFileRepo(database, logger, metricsMetrics)
	storageUsecase := biz.NewStorageUsecase(client, minioClient, fileRepo, confAuth, metricsMetrics, logger)
	storageService := service.NewGatewayService(storageUsecase, metricsMetrics, logger)
	httpServer := server.NewHTTPServer(confAuth, confServer, storageService, metricsMetrics)
	app := newApp(contextContext, logger, httpServer)
	return app, nil
}
