// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package biz

import (
	"context"
	"storage/internal/clients/auth"
	"sync"
)

// Ensure, that AuthCheckerMock does implement AuthChecker.
// If this is not the case, regenerate this file with moq.
var _ AuthChecker = &AuthCheckerMock{}

// AuthCheckerMock is a mock implementation of AuthChecker.
//
//	func TestSomethingThatUsesAuthChecker(t *testing.T) {
//
//		// make and configure a mocked AuthChecker
//		mockedAuthChecker := &AuthCheckerMock{
//			CheckFunc: func(ctx context.Context, token string) (*auth.CheckResult, error) {
//				panic("mock out the Check method")
//			},
//		}
//
//		// use mockedAuthChecker in code that requires AuthChecker
//		// and then make assertions.
//
//	}
type AuthCheckerMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(ctx context.Context, token string) (*auth.CheckResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
	}
	lockCheck sync.RWMutex
}

// Check calls CheckFunc.
func (mock *AuthCheckerMock) Check(ctx context.Context, token string) (*auth.CheckResult, error) {
	if mock.CheckFunc == nil {
		panic("AuthCheckerMock.CheckFunc: method is nil but AuthChecker.Check was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(ctx, token)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedAuthChecker.CheckCalls())
func (mock *AuthCheckerMock) CheckCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}
