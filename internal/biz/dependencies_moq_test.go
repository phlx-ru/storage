// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package biz

import (
	"context"
	"storage/ent"
	"sync"
)

// Ensure, that fileRepositoryMock does implement fileRepository.
// If this is not the case, regenerate this file with moq.
var _ fileRepository = &fileRepositoryMock{}

// fileRepositoryMock is a mock implementation of fileRepository.
//
//	func TestSomethingThatUsesfileRepository(t *testing.T) {
//
//		// make and configure a mocked fileRepository
//		mockedfileRepository := &fileRepositoryMock{
//			CreateFunc: func(ctx context.Context, file *ent.File) (*ent.File, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, uid string) error {
//				panic("mock out the Delete method")
//			},
//			FindByFilenameFunc: func(ctx context.Context, filename string) (*ent.File, error) {
//				panic("mock out the FindByFilename method")
//			},
//			FindByObjectPathFunc: func(ctx context.Context, objectPath string) (*ent.File, error) {
//				panic("mock out the FindByObjectPath method")
//			},
//			FindByUIDFunc: func(ctx context.Context, uid string) (*ent.File, error) {
//				panic("mock out the FindByUID method")
//			},
//			FindByUserIDFunc: func(ctx context.Context, userID int, limit int, offset int) ([]*ent.File, error) {
//				panic("mock out the FindByUserID method")
//			},
//			RestoreFunc: func(ctx context.Context, uid string) error {
//				panic("mock out the Restore method")
//			},
//		}
//
//		// use mockedfileRepository in code that requires fileRepository
//		// and then make assertions.
//
//	}
type fileRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, file *ent.File) (*ent.File, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, uid string) error

	// FindByFilenameFunc mocks the FindByFilename method.
	FindByFilenameFunc func(ctx context.Context, filename string) (*ent.File, error)

	// FindByObjectPathFunc mocks the FindByObjectPath method.
	FindByObjectPathFunc func(ctx context.Context, objectPath string) (*ent.File, error)

	// FindByUIDFunc mocks the FindByUID method.
	FindByUIDFunc func(ctx context.Context, uid string) (*ent.File, error)

	// FindByUserIDFunc mocks the FindByUserID method.
	FindByUserIDFunc func(ctx context.Context, userID int, limit int, offset int) ([]*ent.File, error)

	// RestoreFunc mocks the Restore method.
	RestoreFunc func(ctx context.Context, uid string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// File is the file argument value.
			File *ent.File
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UID is the uid argument value.
			UID string
		}
		// FindByFilename holds details about calls to the FindByFilename method.
		FindByFilename []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filename is the filename argument value.
			Filename string
		}
		// FindByObjectPath holds details about calls to the FindByObjectPath method.
		FindByObjectPath []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ObjectPath is the objectPath argument value.
			ObjectPath string
		}
		// FindByUID holds details about calls to the FindByUID method.
		FindByUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UID is the uid argument value.
			UID string
		}
		// FindByUserID holds details about calls to the FindByUserID method.
		FindByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// Restore holds details about calls to the Restore method.
		Restore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UID is the uid argument value.
			UID string
		}
	}
	lockCreate           sync.RWMutex
	lockDelete           sync.RWMutex
	lockFindByFilename   sync.RWMutex
	lockFindByObjectPath sync.RWMutex
	lockFindByUID        sync.RWMutex
	lockFindByUserID     sync.RWMutex
	lockRestore          sync.RWMutex
}

// Create calls CreateFunc.
func (mock *fileRepositoryMock) Create(ctx context.Context, file *ent.File) (*ent.File, error) {
	if mock.CreateFunc == nil {
		panic("fileRepositoryMock.CreateFunc: method is nil but fileRepository.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		File *ent.File
	}{
		Ctx:  ctx,
		File: file,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, file)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedfileRepository.CreateCalls())
func (mock *fileRepositoryMock) CreateCalls() []struct {
	Ctx  context.Context
	File *ent.File
} {
	var calls []struct {
		Ctx  context.Context
		File *ent.File
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *fileRepositoryMock) Delete(ctx context.Context, uid string) error {
	if mock.DeleteFunc == nil {
		panic("fileRepositoryMock.DeleteFunc: method is nil but fileRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		UID string
	}{
		Ctx: ctx,
		UID: uid,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, uid)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedfileRepository.DeleteCalls())
func (mock *fileRepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	UID string
} {
	var calls []struct {
		Ctx context.Context
		UID string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindByFilename calls FindByFilenameFunc.
func (mock *fileRepositoryMock) FindByFilename(ctx context.Context, filename string) (*ent.File, error) {
	if mock.FindByFilenameFunc == nil {
		panic("fileRepositoryMock.FindByFilenameFunc: method is nil but fileRepository.FindByFilename was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Filename string
	}{
		Ctx:      ctx,
		Filename: filename,
	}
	mock.lockFindByFilename.Lock()
	mock.calls.FindByFilename = append(mock.calls.FindByFilename, callInfo)
	mock.lockFindByFilename.Unlock()
	return mock.FindByFilenameFunc(ctx, filename)
}

// FindByFilenameCalls gets all the calls that were made to FindByFilename.
// Check the length with:
//
//	len(mockedfileRepository.FindByFilenameCalls())
func (mock *fileRepositoryMock) FindByFilenameCalls() []struct {
	Ctx      context.Context
	Filename string
} {
	var calls []struct {
		Ctx      context.Context
		Filename string
	}
	mock.lockFindByFilename.RLock()
	calls = mock.calls.FindByFilename
	mock.lockFindByFilename.RUnlock()
	return calls
}

// FindByObjectPath calls FindByObjectPathFunc.
func (mock *fileRepositoryMock) FindByObjectPath(ctx context.Context, objectPath string) (*ent.File, error) {
	if mock.FindByObjectPathFunc == nil {
		panic("fileRepositoryMock.FindByObjectPathFunc: method is nil but fileRepository.FindByObjectPath was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ObjectPath string
	}{
		Ctx:        ctx,
		ObjectPath: objectPath,
	}
	mock.lockFindByObjectPath.Lock()
	mock.calls.FindByObjectPath = append(mock.calls.FindByObjectPath, callInfo)
	mock.lockFindByObjectPath.Unlock()
	return mock.FindByObjectPathFunc(ctx, objectPath)
}

// FindByObjectPathCalls gets all the calls that were made to FindByObjectPath.
// Check the length with:
//
//	len(mockedfileRepository.FindByObjectPathCalls())
func (mock *fileRepositoryMock) FindByObjectPathCalls() []struct {
	Ctx        context.Context
	ObjectPath string
} {
	var calls []struct {
		Ctx        context.Context
		ObjectPath string
	}
	mock.lockFindByObjectPath.RLock()
	calls = mock.calls.FindByObjectPath
	mock.lockFindByObjectPath.RUnlock()
	return calls
}

// FindByUID calls FindByUIDFunc.
func (mock *fileRepositoryMock) FindByUID(ctx context.Context, uid string) (*ent.File, error) {
	if mock.FindByUIDFunc == nil {
		panic("fileRepositoryMock.FindByUIDFunc: method is nil but fileRepository.FindByUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		UID string
	}{
		Ctx: ctx,
		UID: uid,
	}
	mock.lockFindByUID.Lock()
	mock.calls.FindByUID = append(mock.calls.FindByUID, callInfo)
	mock.lockFindByUID.Unlock()
	return mock.FindByUIDFunc(ctx, uid)
}

// FindByUIDCalls gets all the calls that were made to FindByUID.
// Check the length with:
//
//	len(mockedfileRepository.FindByUIDCalls())
func (mock *fileRepositoryMock) FindByUIDCalls() []struct {
	Ctx context.Context
	UID string
} {
	var calls []struct {
		Ctx context.Context
		UID string
	}
	mock.lockFindByUID.RLock()
	calls = mock.calls.FindByUID
	mock.lockFindByUID.RUnlock()
	return calls
}

// FindByUserID calls FindByUserIDFunc.
func (mock *fileRepositoryMock) FindByUserID(ctx context.Context, userID int, limit int, offset int) ([]*ent.File, error) {
	if mock.FindByUserIDFunc == nil {
		panic("fileRepositoryMock.FindByUserIDFunc: method is nil but fileRepository.FindByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		UserID: userID,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockFindByUserID.Lock()
	mock.calls.FindByUserID = append(mock.calls.FindByUserID, callInfo)
	mock.lockFindByUserID.Unlock()
	return mock.FindByUserIDFunc(ctx, userID, limit, offset)
}

// FindByUserIDCalls gets all the calls that were made to FindByUserID.
// Check the length with:
//
//	len(mockedfileRepository.FindByUserIDCalls())
func (mock *fileRepositoryMock) FindByUserIDCalls() []struct {
	Ctx    context.Context
	UserID int
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		UserID int
		Limit  int
		Offset int
	}
	mock.lockFindByUserID.RLock()
	calls = mock.calls.FindByUserID
	mock.lockFindByUserID.RUnlock()
	return calls
}

// Restore calls RestoreFunc.
func (mock *fileRepositoryMock) Restore(ctx context.Context, uid string) error {
	if mock.RestoreFunc == nil {
		panic("fileRepositoryMock.RestoreFunc: method is nil but fileRepository.Restore was just called")
	}
	callInfo := struct {
		Ctx context.Context
		UID string
	}{
		Ctx: ctx,
		UID: uid,
	}
	mock.lockRestore.Lock()
	mock.calls.Restore = append(mock.calls.Restore, callInfo)
	mock.lockRestore.Unlock()
	return mock.RestoreFunc(ctx, uid)
}

// RestoreCalls gets all the calls that were made to Restore.
// Check the length with:
//
//	len(mockedfileRepository.RestoreCalls())
func (mock *fileRepositoryMock) RestoreCalls() []struct {
	Ctx context.Context
	UID string
} {
	var calls []struct {
		Ctx context.Context
		UID string
	}
	mock.lockRestore.RLock()
	calls = mock.calls.Restore
	mock.lockRestore.RUnlock()
	return calls
}
