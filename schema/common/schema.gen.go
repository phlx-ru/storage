// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// ErrorCommon defines model for errorCommon.
type ErrorCommon struct {
	Error struct {
		// Code Error code
		Code int `json:"code"`

		// Message Error message
		Message string `json:"message"`

		// Reason Typed reason of error
		Reason string `json:"reason"`
	} `json:"error"`
}

// Filename Filename
type Filename = string

// ErrorBadRequest defines model for errorBadRequest.
type ErrorBadRequest = ErrorCommon

// ErrorInternal defines model for errorInternal.
type ErrorInternal = ErrorCommon

// ErrorTooManyRequests defines model for errorTooManyRequests.
type ErrorTooManyRequests = ErrorCommon

// ErrorUnauthorized defines model for errorUnauthorized.
type ErrorUnauthorized = ErrorCommon

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUwW7UPBB+FWv+/+jtpi17IFIPFIHUA1IFywkQGpJJ1lViu7ZTdqly4YZ4B96BQyWE",
	"aHkF942QnWQ3SwsSl70lM/PN9814Zi4hU7VWkqSzkF6CRoM1OTLxrxAVSawpfOdkMyO0E0pCCk8HDwcR",
	"/s8bMivg0EVvgBwMnTfCUA6pMw1xsNmCavxrRlpirauQx4pM7+m8AA5upaPFGSFLaDksJwq1mGQqp5Lk",
	"hJbO4MRhGZVfYCVydAExCOC1kEeHvMbl0cFsBm3bBnFWK2kpYsgYZY4xf07nDVkXTJmSjmT8RK0rkWFQ",
	"Oz2zQfLlqJb/DRWQwn/TTTunnddOY97Hqq6V7Fi3C3+QJOwYczbQthzGiB2p6Dzs0ekJi5FrGSfSkZFY",
	"7UrILEnYwMlekLkgw55sKZor9Qzlqu+X3dk7HTxkc6VY4GZr8kHUS4mNWygjPoRR39Xk7LMt3hDSY9cD",
	"vRkjzHMRkFidGqXJOBHmvsDKEgc9MvXIf8SERby71vHpWPSNFnuWJOuNFtJRSfF5a7IWyz9mGdzjCzFf",
	"kCEmLLOqJrcQsmTvjZLlfRfDEPbt384+X2nKWedlqugXYMwSevx2MP+Wtx3fuFfQl9pzbWp6swaqd2eU",
	"uTvALv09YW24sYW6q9t/8V9vP/lv/or57/7G//A//Y2/9lf++vbj7efXgd4JFyvIuv0eXXsOF2Rsl2l/",
	"L9lLQouUJolaQAqH0cRBo1tYSGVTVe2vAAAA//8BezgJLgYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
