// Package storage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package storage

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "storage/schema/common"
	externalRef1 "storage/schema/storage"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	IntegrationsScopes = "integrations.Scopes"
	JwtScopes          = "jwt.Scopes"
)

// UploadParams defines parameters for Upload.
type UploadParams struct {
	// Filename
	Filename externalRef0.Filename `form:"filename" json:"filename" validate:"required,min=3,max=255"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/1/download/{uid})
	Download(c *gin.Context, uid externalRef1.Uid)

	// (GET /api/1/files/list)
	FilesList(c *gin.Context)

	// (POST /api/1/upload)
	Upload(c *gin.Context, params UploadParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// Download operation middleware
func (siw *ServerInterfaceWrapper) Download(c *gin.Context) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid externalRef1.Uid

	err = runtime.BindStyledParameter("simple", false, "uid", c.Param("uid"), &uid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter uid: %s", err)})
		return
	}

	c.Set(IntegrationsScopes, []string{""})

	c.Set(JwtScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Download(c, uid)
}

// FilesList operation middleware
func (siw *ServerInterfaceWrapper) FilesList(c *gin.Context) {

	c.Set(IntegrationsScopes, []string{""})

	c.Set(JwtScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.FilesList(c)
}

// Upload operation middleware
func (siw *ServerInterfaceWrapper) Upload(c *gin.Context) {

	var err error

	c.Set(IntegrationsScopes, []string{""})

	c.Set(JwtScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadParams

	// ------------- Required query parameter "filename" -------------
	if paramValue := c.Query("filename"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument filename is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "filename", c.Request.URL.Query(), &params.Filename)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter filename: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Upload(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/1/download/:uid", wrapper.Download)

	router.GET(options.BaseURL+"/api/1/files/list", wrapper.FilesList)

	router.POST(options.BaseURL+"/api/1/upload", wrapper.Upload)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yX324bxRfHX2U0v99FKzm7dgMI9o4KVSp/JERagRRbysSe2Nt6Z5bZdSwTWYodUoga",
	"UYqQuAQuuN+42Xjj2M4rnHkFngSd2fXfxKUokXrTGyee7Jw95zvf85mTPVqWni8FF2FAnT0a8HJDuWFr",
	"o1zjHjdLrgh5VbHQlcJ8r/CgrFwfv1OHfvr1ozXdhTEMIIYRgVO40C8IJDDSXYjhld6HSD+DBM6tooBf",
	"YAx9GMIYzmAEYwKXMIYLfaB/gER39TGBEUTE7BzoA30EMQyJ7kCs96FnPmOiO+m2IYz1kT7WPxEYmK8R",
	"jOBUP3eKoigI2dra2mZBDX8tV4i9y5TdbDbtKgt5k7VIsZHP3/sg/SQee8rJk2aY7SsKmqMuVlfjrMIV",
	"zVHBPE4d+s3awzk11h7JpxyfDVs+/pX57me8Rds5+qQZolTbnCmuHkjlsTDViuaW9IOfoYf66X1IoJ9p",
	"NYYRjPRzOCdz0t5hjbBm3njXIqQo4Pdl7eZ0RRk3dUd3UX8YQaKfQUwguuZlSemOjaHtu5YpPDBHT50s",
	"+1l5tTD0abvdRm125FUrbKyTjVAqVuXk4y8fTqwwPb1Ed2AMPVJmqirNm0I3rGPgIN1Fc3SXqyANVrAK",
	"VgGllD4XzHepQ9etvLVOc9RnYc040Wa+axfsimyKumQVe6/hVtpX84I/YQARygQ9iCDWXaK/hwjO4QLN",
	"tGCviMAJxNAncKn3MV2zOoBkhXapZFVujlv6PHXGwwp16CdZWjRHFQ98KYK0n+7l8/jj/4rvUIdadla9",
	"bXRnVot59f/Zs660p5unhaIs7y1FKUvPk+INgnClpLrPKl/xbxs8CNNYhRvEeizQPVK53/E0s3sf3SDa",
	"Iym/YKKVZRdgwPdvVCo2rBKsTtG4E7xRZ3MZbJulrG03S+1SjoasiotTb5baaDzFPB5yFZj9b3yCs312",
	"w61QDB80PI+p1lV3jiBBxmX+RBguOxQlyZy/49Z5YNfdILzG9SlrewbAR5nvkQtwgibG9oxSzOjDKbYH",
	"EMEZnMIYXs3ofAx90wmR4fKFPtYdQ1x8ZJZojmBXIPD1AZwhsZBEaRyk0cb6mj6c0AguIEG6r+6eB1ja",
	"51jZrbXPzjTku/55K/0zZ/rZ3RVPLN+BS3NHDND0E1vhhTG5SOanAmOrRSKPs/4Zvd69L+b6p+EbnF7t",
	"nd/mnLx0Y6QTylxH3nZ+Frm+dcf6R0jgBF+RIxDrDjbRyh7FPOMVKVgE/oDIDGIm//5itWaOWGxugivT",
	"UcIcGvl7/1dipq6B7kACQ30AQ1LI53ERBUDQRHBuJpgeFoWqpWce4XkfmBOP9SGGT9k20i/TSrtmoWtm",
	"vSmnYIj1roLMfLLZY6mfEmIQpF/CkKCbTkzp8QIA02t8Fd//pWHm8I6IMaMitoAvg2vA9tifDgWmRe/L",
	"Sus/Am2yz+XBxMLtW6PkLOA7RL5VRM4Y1F9kYnQNg6ZXq8EpQs6konYnZl4EHM7nUpAgZFVXVAkXu66S",
	"wuMCr9uGqmfTfuDYE+dYZmy3ttcUD2qWatB2bkXQuiyzOnHFjmIrg2FmbpkHlnm4Jo1JXhuvwrcb1YV4",
	"jm1Pdzsf5vN5OifqFaL/tTx6zP6pm+jfLrX/CQAA//+zlHUtDw8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common/schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./storage/schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
