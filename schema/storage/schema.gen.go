// Package storage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package storage

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// file item
type FileItemCompact struct {
	// Название файла с расширением, с таким названием файл будет скачан
	Filename PropertyFilename `json:"filename"`

	// MIME-тип файла
	MimeType *PropertyMimeType `json:"mimeType,omitempty"`

	// Расположение файла на S3-хранилище
	ObjectPath PropertyObjectPath `json:"objectPath"`

	// Размер файла в байтах
	Size *PropertySize `json:"size,omitempty"`

	// Уникальный идентификатор файла в формате UUID
	Uid PropertyUid `json:"uid"`
}

// file item
type FileItemFull struct {
	// Название файла с расширением, с таким названием файл будет скачан
	Filename PropertyFilename `json:"filename"`

	// MIME-тип файла
	MimeType *PropertyMimeType `json:"mimeType,omitempty"`

	// Расположение файла на S3-хранилище
	ObjectPath PropertyObjectPath `json:"objectPath"`

	// Размер файла в байтах
	Size *PropertySize `json:"size,omitempty"`

	// Уникальный идентификатор файла в формате UUID
	Uid PropertyUid `json:"uid"`

	// Уникальный идентификатор пользователя
	UserId PropertyUserId `json:"userId"`
}

// upload ok reply
type FilesListResponse struct {
	Files []FileItemCompact `json:"files"`
}

// Название файла с расширением, с таким названием файл будет скачан
type PropertyFilename = string

// MIME-тип файла
type PropertyMimeType = string

// Расположение файла на S3-хранилище
type PropertyObjectPath = string

// Размер файла в байтах
type PropertySize = int

// Уникальный идентификатор файла в формате UUID
type PropertyUid = string

// Уникальный идентификатор пользователя
type PropertyUserId = int

// file item
type UploadResponse = FileItemFull

// Название файла с расширением, с таким названием файл будет скачан
type Filename = PropertyFilename

// Уникальный идентификатор файла в формате UUID
type Uid = PropertyUid

// upload ok reply
type FilesList = FilesListResponse

// file item
type Upload = UploadResponse

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXy24bNxT9FYLtIglmrIcV29UufQQwUCNBXa/aLmgNZTOeIWmS41QxVNiKjbZIgG6L",
	"AkFb9AcU16oVS3Z+4fKPCnL0mLGEVG6ArroRZob3ce4595LUIW6IRApOudG4foglUSShhir/1mQx5SSh",
	"7jmiuqGYNExwXJ+uBJi59/2UqhYOcGadX1Z0P2WKRrhuVEoDrBu7NCEu4oeKNnEdf1CaQihlq7oklZBU",
	"mdbDcaB2O8Api+YjQSln+ylFLKLcsCajCt3Z2lr/9O4YniRmd4rOxXlfYFsswm0HyoWh2nwsIkY9aamM",
	"BfFAG4Ibyo17vFe6h+uHzr6I3tWHRiHQtoha6Ckzu2jkGZqWpEg0kS+S8AgxLlODImIIaiqRoO2WoXps",
	"MVNUhk9LwXWGLRJP+S3Qjc2R2MPtwFOtP2fa3HAnUsasQZxT6Yl2nocLsjmJ+MUIZcbprMIaxS6va4J5",
	"9P57BFm4d6XPLDwF7XGXTKZj3dDkE5FI0shwRBFzbiR+nPWJ74kmiTWdVxVihiY4wDJnXJy6281IgBOW",
	"0C9bcmHfjbF9O8Bi+wltmMduVBb0fjT1cNSwZwvn3XS205FefOLyLf7VaJJzu02uhm8CbDwTo4/jDnaS",
	"PUzj+H+9/gO9ApxqqtYXd8qs5+s8CnVbwYsbzO1Unww/UlTGrbna+wfXGXqR7S6/Y7QniIlSpDVTdhZ9",
	"Xl0zvTRzLsIr6MIFnEEXrqAPPWRPoAtvYABdZI+RPYKuPbY/QN8eQS8zgWHglzrQhUvowxDBVTEIDCdh",
	"ELy2z+EceraD7DFcQtd+78xwgOm3JJGxAwy/LyH4zWc6hh4MAgS/LiF4Bdf2CM6gD3+i7xD87Pztc2dk",
	"O3Dm4VzZF/AGQR+ubMd5wgB6cJnluoYzD3qYt3wL13BuT90vuvNgfeNBWL0boGoIPRflAs7HNQSoWi6v",
	"LsmoiSfEaqMY38kTu5EbzCKxG+sbn4W2A314m+O0UHb+OPqHPI8KQ3xDQs+cr2wA1/DXWKe8lE4htLkc",
	"2lOnqF8fQN/+CL0CokpJh4poTeNQhlyoA7YTMr2Xam0OKOctFjJuaBzTPRNqcaBokn2VItrbFVFIWELC",
	"algNacieRYQzGi7C4uZoi5mtCy6cfPaoUMsZgtfuzXWgPc0XUKmu1ZbLlbVJLgd3h6p8sq1510P4w3Ny",
	"CV0Y2JfTtjp3ZDoV7Um2bDuuKW/AsSe+U4d+uYfcnbJIa3WZ1u6vrIZ07aPtsFKNlkNSu78S1qorK5Va",
	"ZbVWLpffxc/WZHN8P9RZj9iXcOGGI0MLA/tTgcJ53N24/iy4f/nj01+VGG+KOfB/gWsYelBXGWL7As10",
	"aPdr7rhhJs7IEYrsUJT7PxLgA6p0FrKyVF4q+1NPUk4kw3W87D8F/nKvcZ2ncdz+OwAA//9pUwbn0AwA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
