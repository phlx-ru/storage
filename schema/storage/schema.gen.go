// Package storage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package storage

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// FileItemCompact file item
type FileItemCompact struct {
	// Filename Название файла с расширением, с таким названием файл будет скачан
	Filename PropertyFilename `json:"filename"`

	// MimeType MIME-тип файла
	MimeType *PropertyMimeType `json:"mimeType,omitempty"`

	// ObjectPath Расположение файла на S3-хранилище
	ObjectPath PropertyObjectPath `json:"objectPath"`

	// Size Размер файла в байтах
	Size *PropertySize `json:"size,omitempty"`

	// Uid Уникальный идентификатор файла в формате UUID
	Uid PropertyUid `json:"uid"`
}

// FileItemFull file item
type FileItemFull struct {
	// Filename Название файла с расширением, с таким названием файл будет скачан
	Filename PropertyFilename `json:"filename"`

	// MimeType MIME-тип файла
	MimeType *PropertyMimeType `json:"mimeType,omitempty"`

	// ObjectPath Расположение файла на S3-хранилище
	ObjectPath PropertyObjectPath `json:"objectPath"`

	// Size Размер файла в байтах
	Size *PropertySize `json:"size,omitempty"`

	// Uid Уникальный идентификатор файла в формате UUID
	Uid PropertyUid `json:"uid"`

	// UserId Уникальный идентификатор пользователя
	UserId PropertyUserId `json:"userId"`
}

// FilesListResponse upload ok reply
type FilesListResponse struct {
	Files []FileItemCompact `json:"files"`
}

// PropertyFilename Название файла с расширением, с таким названием файл будет скачан
type PropertyFilename = string

// PropertyMimeType MIME-тип файла
type PropertyMimeType = string

// PropertyObjectPath Расположение файла на S3-хранилище
type PropertyObjectPath = string

// PropertySize Размер файла в байтах
type PropertySize = int

// PropertyUid Уникальный идентификатор файла в формате UUID
type PropertyUid = string

// PropertyUserId Уникальный идентификатор пользователя
type PropertyUserId = int

// UploadResponse file item
type UploadResponse = FileItemFull

// Filename Название файла с расширением, с таким названием файл будет скачан
type Filename = PropertyFilename

// Uid Уникальный идентификатор файла в формате UUID
type Uid = PropertyUid

// FilesList upload ok reply
type FilesList = FilesListResponse

// Upload file item
type Upload = UploadResponse

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX3W7bNhR+FYLbRVtI8U/cNPNd91MgwIIWy3K17YKx6ISNRDIklc4NPCRugm1ogd0O",
	"A4pt2Au4Wby4sZO+wuEbDaT8I8VG56zALobeGJJ4zuF3vu87lHyAGyKRglNuNK4fYEkUSaihyt81WUw5",
	"Sai7jqhuKCYNExzXpysBZu5+L6WqhQOcReeXFd1LmaIRrhuV0gDrxg5NiKv4oaJNXMcflKYQStmqLkkl",
	"JFWm9WBcqN0OcMqi+UhQytleShGLKDesyahCtzY31z69PYYnidmZonN13hXYJotw24FyZag2H4uIUU9a",
	"KmNBPNCG4IZy4y7vlO7g+oGLL6J3/aFRCbQlohZ6wswOGmWGpiUpEk3kmyQ8QozL1KCIGIKaSiRoq2Wo",
	"HkfMNJXh01JwnWGLxBN+A3TjcCR2cTvwVOvPmTbX0omUMWsQl1R6rF3mwYJsTip+MUKZcTqrsEax29eZ",
	"YB69/x5BVu5t22cRnoL22CWT6VgzNPlEJJI0MhxRxFwaiR9lPvGeaJJY03ldIWZoggMsc8HFqbvZjAQ4",
	"YQn9siUXzl0fx7cDLLYe04Z55EZlweyH0wxHDXu68L4bLnY60otPXN7iX40mOXfa5Hr4JsDGMzF6OHaw",
	"k+xBGsfv9foP9ApwqqlaWzwpi56v86jUTQUvHjA3U30y/EhRGbfmau8vnDP0Isdd/sRoTxATpUhrpu2s",
	"+ry+Zrw0816El9CFcziFLlxCH3rIHkMXXsMAusgeIXsIXXtkf4C+PYReFgLDwC91oAsX0IchgstiERhO",
	"yiB4ZZ/BGfRsB9kjuICu/d6F4QDTb0kiYwcYfl9C8Jvf6Qh6MAgQ/LqE4CVc2UM4hT78ib5D8LPLt89c",
	"kO3AqYdzaZ/DawR9uLQdlwkD6MFFttcVnHrQw3zkG7iCM3viftGt+2vr98Pq7QBVQ+i5KudwNu4hQNVy",
	"+d6SjJp4Qqw2ivHtPLHrucEsEru+tv5ZaDvQhzc5Tgtt519H/7DPw8IQX5PQM+c7G8AV/DXWKS+lUwht",
	"LIf2xCnq1wfQtz9Cr4CoUtKhIlrTOJQhF2qfbYdM76Zam33KeYuFjBsax3TXhFrsK5pkT6WIdndEFBKW",
	"kLAaVkMasqcR4YyGi7C4MTpiZvuCcyefPSz0corglbtzDrQn+QYq1dXacrmyOtnLwd2mKr/Z5rzPQ/jD",
	"c3IBXRjYF1NbnTkynYr2OFu2HWfKa3DssXfq0C/3kPumLNJaXaa1uyv3Qrr60VZYqUbLIandXQlr1ZWV",
	"Sq1yr1Yul9/Gz+bkcHw31JlH7As4d8ORoYWB/alA4Tzurn3+vH8l/t9fia4M400xx3O/wBUMvZMuM5vZ",
	"52jmWOl+zZ2hmYkzRwtFtinK/YkM8D5VOitZWSovlb0uknIiGa7jZf8o8P/INK7zNI7bfwcAAP//Z6tl",
	"HoUOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
